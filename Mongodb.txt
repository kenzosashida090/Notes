Mongo shell is basically just a way for us to be able to interact with our MongoDB databases on our local system using command line


To start the server of mongo we type on the terminal

mongod and mongosh in another tab of the terminal to start using the sell to create dbs.

To connect to the mongodb on the cloud we need to create a cluster on the mongodb page

Collection are similar to tables in SQL. They are a collection of documents and a document is simply just a single data record, so that would be 
a single row if you were using SQL based database

to set a new database we write:

use nameofDatabase

to add a collection

db.nameofCollection.insertOne({name:"dasdas",age:21,etc})
or
db.nameofCollection.insertMany({""})

to vitualize all the collections we write

db.products.find()

but if you want to find a particular data we need to use query like:

$eq  Matches values that are equal to a specified value

$gt Matches values that are greater than a specified value

$gte Matches values that are greater than or equual to a specified value.

$in Matches any of the values specified in an array

$lt Matches values taht are less than a specified value

$lte Matches values that are less than or equial to a specified value

$ne Matches all the values that are not equal to a specified value

$nin Matches none of the values specified in an array

to search a specified data 


shopDB> db.products.find({price :{$gt:1}})


to get only returned a specific data we use logic 1 true 0 false

db.products.find({_id:1}, {name:1,_id:0})

what that syntax says is that we want to search the data with id 1 and get return the name but the id by default also return so we specifie that
we dont want the id.

that second  parameter is what we call our projection.


////////////////////////////////UPDATE//////////////////////////////////////////

db.products.updateOne({_id:1}, {$set: {stock: 32}})

search that id =1 and then we are going to set another collection called stock that has 32 

db.products.deleteOne()

to make relationships like an array like:
db.products.insertOne(
{
_id:3,
name: "Rubber",
price: 1.30,
stock: 43,
reviews: [{
	autorName:"Sally",
	raing: 5,
	review:"Best rubber ever!"
},
{
	 autorName:"Kenzo",
	 raing: fuchi,                                                                                                                
	 review:"No!"  

}
]
We can say that we have a single document we say that have one to many kind of relationships one product could have many reviews

we we crate a node app and need to connect to a mongoDB database there is two ways to handle this:
-Use mongodb native driver

-Use ODM Mongoose ---> this is the most popular 


/////////////////////////////////////////////////MONGOOSE//////////////////////////////////////////////////////////////
Mongoose is an Object Data Modeling (ODM) library from mongoDB and Node.js, a higher level of abstraction.

Mongoose allows for rapid and simple development of mongoDB database interaction

Features: schemas to model data and relationships, easy data validation, simplequery API, middleware, etc;

Mongoose schema: Where we model our data, by describing the structure of the data, default values, and validation;

Mongoose model: a wrapper for the schema, providing an interface to the database for CRUD operations.


To create a model we also need to create a schema to perform the CRUD operation with the model.

MVC MODEL

Application logic (Controller e.g. tourController.js) 		Business Logic (Model e.g.creating new tours in the database, checking if user's password is correct)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Middleware allows us to interact between the reques and the response can handle errors before it execuites into the web.
agegators will allow us to interact with the data on the db like adding or the average of some data set a match(a way to find a certain data) and a group
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ERRORS CAN CONSIDERATE AS OPERATIONAL ERRORS (PROBLEMS THAT WE CAN PREDICT) PROGRAMMING ERRORS (DEV ERRORS)
WE CAN CREATE A GLOBAL ERROR HANDLER TO SEND ALL THE ERRORS TO A SPECIFIC MIDDLEWARE